generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid()) @db.Uuid
  name          String
  email         String   @unique
  password      String
  devices       Device[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  notifications Notification[]
}

model Device {
  uuid        String   @id @default(uuid()) @db.Uuid
  name        String
  location    String
  sn          String   @db.VarChar(12) @unique
  description String?
  userId      String   @db.Uuid
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @updatedAt @db.Timestamp(6)

  heartbeats  Heartbeat[]
  notifications Notification[]

  @@map("devices")
}

model Heartbeat {
  id           String   @id @default(uuid()) @db.Uuid
  deviceId     String   @db.Uuid
  cpuUsage     Float
  ramUsage     Float
  diskFree     Float
  temperature  Float
  latencyDns   Int
  connectivity Int
  bootTime     DateTime
  createdAt    DateTime @default(now())

  device Device @relation(fields: [deviceId], references: [uuid], onDelete: Cascade)
}

model Notification {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @db.Uuid
  deviceId   String?  @db.Uuid
  metric     String
  threshold  Float
  condition  String   
  createdAt  DateTime @default(now()) @db.Timestamp(6)

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  device     Device?  @relation(fields: [deviceId], references: [uuid], onDelete: SetNull)

  @@map("notifications")
}




